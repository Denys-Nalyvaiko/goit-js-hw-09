{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAkBC,SAASC,cAAc,SAE/CF,EAAgBG,iBAAiB,UAEjC,SAA0BC,GACxBA,EAAMC,iBAEN,IAAgCC,EAAAF,EAAMG,cAAcC,SAA5CC,EAAwBH,EAAxBI,MAAOC,EAAiBL,EAAjBK,KAAMC,EAAWN,EAAXM,OACfC,EAAaJ,EAAMK,MACnBC,EAAYJ,EAAKG,MACjBE,EAAcJ,EAAOE,MACvBG,EAAU,EACVC,EAAa,EAOjB,SAASC,IAoBX,IAAuBC,EAAUV,GAnB7BO,GAAW,GAEGI,OAAOL,IAAwC,IAAxBK,OAAOL,GAC1CM,cAAcJ,KAgBGE,EAZLH,EAYeP,EAZNK,EAalB,IAAIQ,SAAQ,SAACC,EAASC,GACLC,KAAKC,SAAW,GAGpCH,EAAQ,CAAEJ,WAAUV,UAEpBe,EAAO,CAAEL,WAAUV,S,KAlBlBkB,MAAK,SAAAC,G,IAAGT,EAAQS,EAART,SAAUV,EAAKmB,EAALnB,MACjBZ,EAAAgC,OAAOC,QAAQ,uBAAwCC,OAAfZ,EAAS,QAAYY,OAANtB,EAAM,M,IAE9DuB,OAAM,SAAAJ,G,IAAGT,EAAQS,EAART,SAAUV,EAAKmB,EAALnB,MAClBZ,EAAAgC,OAAOI,QAAQ,sBAAqCF,OAAfZ,EAAS,QAAYY,OAANtB,EAAM,M,IAG9DV,EAAgBmC,Q,CArBlBC,YAAW,WACTjB,IACAD,EAAamB,YAAYlB,EAAaJ,E,GACrCF,E","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst promisesFormRef = document.querySelector('.form');\n\npromisesFormRef.addEventListener('submit', handleFormSubmit);\n\nfunction handleFormSubmit(event) {\n  event.preventDefault();\n\n  const { delay, step, amount } = event.currentTarget.elements;\n  const dealyValue = delay.value;\n  const stepValue = step.value;\n  const amountValue = amount.value;\n  let counter = 0;\n  let intervalId = 0;\n\n  setTimeout(() => {\n    showPromise();\n    intervalId = setInterval(showPromise, stepValue);\n  }, dealyValue);\n\n  function showPromise() {\n    counter += 1;\n\n    if (counter > Number(amountValue) || Number(amountValue) === 0) {\n      clearInterval(intervalId);\n      return;\n    }\n\n    createPromise(counter, stepValue)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n\n    promisesFormRef.reset();\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    if (shouldResolve) {\n      resolve({ position, delay });\n    } else {\n      reject({ position, delay });\n    }\n  });\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$promisesFormRef","document","querySelector","addEventListener","event","preventDefault","_elements","currentTarget","elements","delay1","delay","step","amount","dealyValue","value","stepValue","amountValue","counter","intervalId","showPromise","position","Number","clearInterval","Promise","resolve","reject","Math","random","then","param","Notify","success","concat","catch","failure","reset","setTimeout","setInterval"],"version":3,"file":"03-promises.aea151f2.js.map"}